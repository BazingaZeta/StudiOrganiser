{"version":3,"sources":["dropzone/Dropzone.js","dropzone/Dropzone2.js","components/Task.js","components/Kanbanboard.js","UI/Card.js","UI/Button.js","components/Table.js","components/Managers/ManagersTable.js","components/Inputs/NumberInput.js","components/Inputs/CheckboxInput.js","components/Inputs/TextInput.js","hooks/useForm.js","components/Managers/AddManager.js","components/Managers/Managers.js","axios.js","components/Inputs/InputMapCheckbox.js","components/Inputs/InputMapRadio.js","components/Tasks/TasksForm.js","components/Inputs/ColorInput.js","components/Tasks/AddTask.js","components/Tasks/TasksTypesList.js","components/TaskTypes/TaskTypes.js","App.js","serviceWorker.js","index.js"],"names":["columnsFromBackend","uuid","name","items","Dropzone2","tasks","useEffect","console","log","style","display","justifyContent","height","onDragEnd","result","Task","children","taskType","managers","useState","taskColor","setTaskColor","axios","get","then","response","data","className","backgroundColor","borderColor","map","m","key","id","Kanbanboard","activeTasks","setActiveTasks","ids","Object","keys","newTasks","forEach","push","task","taskName","t","content","Card","props","Button","type","onClick","Table","headings","heading","text","item","ManageManagers","setActiveManager","setManagers","loading","setLoading","newManagers","deleteManagerHandler","manager","a","delete","filter","icon","spin","size","active","color","edit","NumberInput","label","value","onChange","min","max","htmlFor","event","target","CheckboxInput","checked","TextInput","useForm","defaultValues","values","setValues","prevState","AddManager","onSuccess","submitting","setSubmitting","handleSubmit","e","preventDefault","put","post","onSubmit","age","Managers","activeManager","instance","create","baseURL","InputMapCheckbox","options","handleChange","val","includes","filtered","InputMapRadio","TasksForm","taskTypes","setTaskTypes","newTaskTypes","submitHandler","ColorInput","AddTask","TaskTypesList","setActiveTask","setTasks","deleteTaskHandler","TaskTypes","activeTask","App","to","path","component","Boolean","window","location","hostname","match","library","add","fab","faCircleNotch","faTrashAlt","faPen","faGrinAlt","faFrown","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.75a49bb6.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport uuid from \"uuid/v4\";\r\n\r\nconst Dropzone = ({ tasks }) => {\r\n  const itemsFromBackend12 = [\r\n    { id: uuid(), content: \"First task\" },\r\n    { id: uuid(), content: \"Second task\" }\r\n  ];\r\n\r\n  const columnsFromBackend = {\r\n    [uuid()]: {\r\n      name: \"Requested\",\r\n      items: itemsFromBackend12\r\n    },\r\n    [uuid()]: {\r\n      name: \"To do\",\r\n      items: []\r\n    },\r\n    [uuid()]: {\r\n      name: \"In Progress\",\r\n      items: []\r\n    },\r\n    [uuid()]: {\r\n      name: \"Done\",\r\n      items: []\r\n    }\r\n  };\r\n\r\n  const onDragEnd = (result, columns, setColumns) => {\r\n    if (!result.destination) return;\r\n    const { source, destination } = result;\r\n    if (source.droppableId !== destination.droppableId) {\r\n      const sourceColumn = columns[source.droppableId];\r\n      const destColumn = columns[destination.droppableId];\r\n      const sourceItems = [...sourceColumn.items];\r\n      const destItems = [...destColumn.items];\r\n      const [removed] = sourceItems.splice(source.index, 1);\r\n      destItems.splice(destination.index, 0, removed);\r\n      setColumns({\r\n        ...columns,\r\n        [source.droppableId]: {\r\n          ...sourceColumn,\r\n          items: sourceItems\r\n        },\r\n        [destination.droppableId]: {\r\n          ...destColumn,\r\n          items: destItems\r\n        }\r\n      });\r\n    } else {\r\n      const column = columns[source.droppableId];\r\n      const copiedItems = [...column.items];\r\n\r\n      const [removed] = copiedItems.splice(source.index, 1);\r\n      copiedItems.splice(destination.index, 0, removed);\r\n      setColumns({\r\n        ...columns,\r\n        [source.droppableId]: {\r\n          ...column,\r\n          items: copiedItems\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const [columns, setColumns] = useState(columnsFromBackend);\r\n  return (\r\n    <div className=\"dragNdrop\" style={{ display: \"flex\", height: \"100%\" }}>\r\n      <DragDropContext\r\n        onDragEnd={result => onDragEnd(result, columns, setColumns)}\r\n      >\r\n        {Object.entries(columns).map(([id, column]) => {\r\n          return (\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                alignItems: \"center\"\r\n              }}\r\n            >\r\n              <h2>{column.name}</h2>\r\n              <div style={{ margin: 8 }}>\r\n                <Droppable droppableId={id} key={id}>\r\n                  {(provided, snapshot) => {\r\n                    return (\r\n                      <div\r\n                        {...provided.droppableProps}\r\n                        ref={provided.innerRef}\r\n                        style={{\r\n                          background: snapshot.isDraggingOver\r\n                            ? \"lightblue\"\r\n                            : \"lightgrey\",\r\n                          padding: 4,\r\n                          width: 250,\r\n                          minHeight: 500\r\n                        }}\r\n                      >\r\n                        {column.items.map((item, index) => {\r\n                          return (\r\n                            <Draggable\r\n                              key={item.id}\r\n                              draggableId={item.id}\r\n                              index={index}\r\n                            >\r\n                              {(provided, snapshot) => {\r\n                                return (\r\n                                  <div\r\n                                    ref={provided.innerRef}\r\n                                    {...provided.draggableProps}\r\n                                    {...provided.dragHandleProps}\r\n                                    style={{\r\n                                      userSelect: \"none\",\r\n                                      padding: 16,\r\n                                      margin: \"0 0 8px 0\",\r\n                                      minHeight: \"50px\",\r\n                                      backgroundColor: snapshot.isDragging\r\n                                        ? \"#263B4A\"\r\n                                        : \"#456c86\",\r\n                                      color: \"white\",\r\n                                      ...provided.draggableProps.style\r\n                                    }}\r\n                                  >\r\n                                    {item.content}\r\n                                  </div>\r\n                                );\r\n                              }}\r\n                            </Draggable>\r\n                          );\r\n                        })}\r\n                        {provided.placeholder}\r\n                      </div>\r\n                    );\r\n                  }}\r\n                </Droppable>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </DragDropContext>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dropzone;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport uuid from \"uuid\";\r\nvar columnsFromBackend = {\r\n  [uuid()]: {\r\n    name: \"Todo\",\r\n    items: []\r\n  }\r\n};\r\nconst Dropzone2 = ({ tasks }) => {\r\n  // const [columns, setColumns] = useState(columnsFromBackend);\r\n  // const [tasksToBoard, setTasksToBoard] = useState(tasks);\r\n\r\n  useEffect(() => {\r\n    columnsFromBackend = {\r\n      [uuid()]: {\r\n        name: \"Todo\",\r\n        items: tasks\r\n      }\r\n    };\r\n  });\r\n\r\n  console.log(columnsFromBackend);\r\n\r\n  return (\r\n    <div style={{ display: \"flex\", justifyContent: \"center\", height: \"100%\" }}>\r\n      <DragDropContext\r\n        onDragEnd={result => console.log(result)}\r\n      ></DragDropContext>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dropzone2;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport \"./Task.css\";\r\n\r\nconst Task = ({ children, taskType, managers }) => {\r\n  const [taskColor, setTaskColor] = useState();\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(`https://studiorganiser.firebaseio.com/tasks/${taskType}.json`)\r\n      .then(response => {\r\n        const taskColor = response.data.taskColor;\r\n        setTaskColor(taskColor);\r\n      });\r\n  });\r\n\r\n  return (\r\n    <div\r\n      className=\"Task\"\r\n      style={{ backgroundColor: taskColor, borderColor: \"1px solid black\" }}\r\n    >\r\n      <h4>{children}</h4>\r\n      <h5>Managers:</h5>\r\n      {managers.map(m => (\r\n        <p key={m.id}>{m.name}</p>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Task;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport uuid from \"uuid/v4\";\r\n\r\nimport Dropzone from \"../dropzone/Dropzone\";\r\nimport Dropzone2 from \"../dropzone/Dropzone2\";\r\nimport Task from \"./Task\";\r\n\r\nimport \"./Kanbanboard.css\";\r\n\r\nconst Kanbanboard = () => {\r\n  const [activeTasks, setActiveTasks] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"https://studiorganiser.firebaseio.com/kanban.json\")\r\n      .then(response => {\r\n        const ids = Object.keys(response.data);\r\n        const newTasks = [];\r\n        ids.forEach(id => {\r\n          newTasks.push({\r\n            ...response.data[id],\r\n            id\r\n          });\r\n          //console.log(\"New Tasks\", newTasks);\r\n        });\r\n        setActiveTasks(newTasks);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"Kanbanboard-box\">\r\n      {activeTasks.map(task => (\r\n        <Task key={task.id} taskType={task.taskType} managers={task.managers}>\r\n          {task.taskName}\r\n        </Task>\r\n      ))}\r\n      {/* <Dropzone tasks={activeTasks} /> */}\r\n      <Dropzone2\r\n        tasks={[activeTasks.map(t => ({ id: t.id, content: t.taskName }))]}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Kanbanboard;\r\n","import React from \"react\";\r\n\r\nimport \"./Card.css\";\r\n\r\nconst Card = props => {\r\n  return <div className=\"card\">{props.children}</div>;\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\n\r\nimport \"./Button.css\";\r\n\r\nconst Button = ({ type = \"button\", onClick, children }) => {\r\n  return (\r\n    <div className=\"Button\">\r\n      <button type={type} onClick={onClick}>\r\n        {children}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport \"./Table.css\";\r\n\r\nconst Table = ({ headings, data }) => {\r\n  return (\r\n    <table className=\"Table\">\r\n      <thead>\r\n        <tr>\r\n          {headings.map(heading => (\r\n            <th key={heading.key}>{heading.text}</th>\r\n          ))}\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {data.map(item => (\r\n          <tr key={item.id}>\r\n            {headings.map(heading => (\r\n              <td key={heading.key}>{item[heading.key]}</td>\r\n            ))}\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nimport Button from \"../../UI/Button\";\r\nimport Table from \"../Table\";\r\nimport \"./ManagersTable.css\";\r\n\r\nconst ManageManagers = ({ setActiveManager }) => {\r\n  const [managers, setManagers] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    axios\r\n      .get(\"https://studiorganiser.firebaseio.com/test.json\")\r\n      .then(response => {\r\n        const ids = Object.keys(response.data);\r\n        const newManagers = [];\r\n        ids.forEach(id => {\r\n          newManagers.push({\r\n            ...response.data[id],\r\n            id\r\n          });\r\n        });\r\n        setManagers(newManagers);\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  const deleteManagerHandler = async manager => {\r\n    setLoading(true);\r\n    await axios.delete(\r\n      `https://studiorganiser.firebaseio.com/test/${manager.id}.json`\r\n    );\r\n    const newManagers = managers.filter(m => m.id !== manager.id);\r\n    setManagers(newManagers);\r\n    setLoading(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"ManagersTable\">\r\n      <h3>Managers</h3>\r\n      {loading ? (\r\n        <FontAwesomeIcon icon=\"circle-notch\" spin size=\"lg\" />\r\n      ) : (\r\n        <Table\r\n          headings={[\r\n            { text: \"Name\", key: \"name\" },\r\n            { text: \"Age\", key: \"age\" },\r\n            { text: \"Active\", key: \"active\" },\r\n            { text: \"\", key: \"edit\" },\r\n            { text: \"\", key: \"delete\" }\r\n          ]}\r\n          data={managers.map(manager => ({\r\n            ...manager,\r\n            active: manager.active ? (\r\n              <FontAwesomeIcon icon=\"grin-alt\" color=\" #00ad43\" size=\"lg\" />\r\n            ) : (\r\n              <FontAwesomeIcon icon=\"frown\" color=\" #EF3340\" size=\"lg\" />\r\n            ),\r\n            edit: (\r\n              <FontAwesomeIcon\r\n                onClick={() => setActiveManager(manager)}\r\n                icon=\"pen\"\r\n                size=\"lg\"\r\n              />\r\n            ),\r\n            delete: (\r\n              <FontAwesomeIcon\r\n                onClick={() => deleteManagerHandler(manager)}\r\n                icon=\"trash-alt\"\r\n                color=\"#8A8D8F\"\r\n                size=\"lg\"\r\n              />\r\n            )\r\n          }))}\r\n        />\r\n      )}\r\n      {!loading ? (\r\n        // <button\r\n        //   type=\"button\"\r\n        //   className=\"submitButton\"\r\n        //   onClick={() => setActiveManager({})}\r\n        // >\r\n        //   Add Manager\r\n        // </button>\r\n        <Button type=\"button\" onClick={() => setActiveManager({})}>\r\n          Add Manager\r\n        </Button>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ManageManagers;\r\n","import React from \"react\";\r\n\r\nconst NumberInput = ({ label, name, value = \"\", onChange, min, max }) => {\r\n  return (\r\n    <div>\r\n      <label htmlFor={name}>{label}</label>\r\n      <input\r\n        type=\"number\"\r\n        id={name}\r\n        min={min}\r\n        max={max}\r\n        onChange={event => onChange(name, event.target.value)}\r\n        value={value}\r\n      ></input>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NumberInput;\r\n","import React from \"react\";\r\n\r\nconst CheckboxInput = ({ name, label, value = false, onChange }) => {\r\n  return (\r\n    <div>\r\n      <label htmlFor={name}>{label}</label>\r\n      <input\r\n        type=\"checkbox\"\r\n        id={name}\r\n        onChange={event => onChange(name, !value)}\r\n        checked={value}\r\n      ></input>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CheckboxInput;\r\n","import React from \"react\";\r\n\r\nimport \"./TextInput.css\";\r\n\r\nconst TextInput = ({ label, name, value = \"\", onChange }) => {\r\n  return (\r\n    <div className=\"TextInput\">\r\n      <label htmlFor={name}>{label}</label>\r\n      <input\r\n        type=\"text\"\r\n        id={name}\r\n        onChange={event => onChange(name, event.target.value)}\r\n        value={value}\r\n      ></input>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TextInput;\r\n","import { useState } from \"react\";\r\n\r\nconst useForm = (defaultValues = {}) => {\r\n  const [values, setValues] = useState(defaultValues);\r\n\r\n  const onChange = (name, value) => {\r\n    console.log(name, value);\r\n    setValues(prevState => {\r\n      return { ...prevState, [name]: value };\r\n    });\r\n  };\r\n\r\n  return { onChange, values };\r\n};\r\n\r\nexport default useForm;\r\n","import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nimport Button from \"../../UI/Button\";\r\nimport NumberInput from \"../Inputs/NumberInput\";\r\nimport CheckboxInput from \"../Inputs/CheckboxInput\";\r\nimport TextInput from \"../Inputs/TextInput\";\r\n\r\nimport useForm from \"../../hooks/useForm\";\r\n\r\nconst AddManager = ({ onSuccess, defaultValues }) => {\r\n  const [submitting, setSubmitting] = useState(false);\r\n  const { onChange, values } = useForm(defaultValues);\r\n\r\n  const handleSubmit = async e => {\r\n    e.preventDefault();\r\n    try {\r\n      setSubmitting(true);\r\n      if (values.id) {\r\n        await axios.put(\r\n          `https://studiorganiser.firebaseio.com/test/${values.id}.json`,\r\n          values\r\n        );\r\n      } else {\r\n        await axios.post(\r\n          \"https://studiorganiser.firebaseio.com/test.json\",\r\n          values\r\n        );\r\n      }\r\n      onSuccess();\r\n    } catch (e) {\r\n      console.log(e);\r\n      setSubmitting(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {submitting ? (\r\n        <FontAwesomeIcon icon=\"circle-notch\" spin size=\"lg\" />\r\n      ) : (\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"form-control\">\r\n            <TextInput\r\n              label=\"Manager Name\"\r\n              name=\"name\"\r\n              onChange={onChange}\r\n              value={values.name}\r\n            />\r\n            <NumberInput\r\n              label=\"Manager age\"\r\n              max={100}\r\n              min={0}\r\n              name=\"age\"\r\n              onChange={onChange}\r\n              value={values.age}\r\n            />\r\n            <CheckboxInput\r\n              label=\"Active\"\r\n              onChange={onChange}\r\n              value={values.active}\r\n              name=\"active\"\r\n            />\r\n            <Button type=\"submit\">Submit Manager</Button>\r\n          </div>\r\n        </form>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddManager;\r\n","import React, { useState } from \"react\";\r\nimport Card from \"../../UI/Card\";\r\n\r\nimport ManagersTable from \"./ManagersTable\";\r\nimport \"./Managers.css\";\r\nimport AddManager from \"./AddManager\";\r\n\r\nconst Managers = () => {\r\n  const [activeManager, setActiveManager] = useState(null);\r\n\r\n  return (\r\n    <section className=\"Managers\">\r\n      <Card>\r\n        {activeManager ? (\r\n          <AddManager\r\n            onSuccess={() => setActiveManager(null)}\r\n            defaultValues={activeManager}\r\n          />\r\n        ) : (\r\n          <ManagersTable setActiveManager={setActiveManager} />\r\n        )}\r\n      </Card>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Managers;\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://studiorganiser.firebaseio.com/\"\r\n});\r\n\r\nexport default instance;\r\n","import React from \"react\";\r\n\r\nimport \"./InputMapCheckbox.css\";\r\n\r\nconst InputMapCheckbox = ({ options, onChange, value = [], name }) => {\r\n  const handleChange = (name, val) => {\r\n    if (value.includes(val)) {\r\n      const filtered = value.filter(item => item !== val);\r\n      onChange(name, filtered);\r\n    } else {\r\n      onChange(name, [...value, val]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"InputMapCheckbox\">\r\n      {options.map(item => (\r\n        <div className=\"checkboxInput\" key={item.id}>\r\n          <input\r\n            type=\"checkbox\"\r\n            name={name}\r\n            onChange={event =>\r\n              handleChange(name, { name: item.name, id: item.id })\r\n            }\r\n          />\r\n          {item.name}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputMapCheckbox;\r\n","import React from \"react\";\r\n\r\nimport \"./InputMapRadio.css\";\r\n\r\nconst InputMapRadio = ({ onChange, options, name, value }) => {\r\n  return (\r\n    <div className=\"InputMapRadio\">\r\n      {options.map(item => (\r\n        <div className=\"radioInput\" key={item.value}>\r\n          <input\r\n            type=\"radio\"\r\n            name={name}\r\n            checked={value === item.value}\r\n            onChange={() => onChange(name, item.value)}\r\n          />\r\n          {item.display}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputMapRadio;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"../../axios\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nimport Button from \"../../UI/Button\";\r\nimport Card from \"../../UI/Card\";\r\nimport InputMapCheckbox from \"../Inputs/InputMapCheckbox\";\r\nimport InputMapRadio from \"../Inputs/InputMapRadio\";\r\nimport TextInput from \"../Inputs/TextInput\";\r\n\r\nimport useForm from \"../../hooks/useForm\";\r\nimport \"./TasksForm.css\";\r\n\r\nconst TasksForm = () => {\r\n  const [managers, setManagers] = useState([]);\r\n  const [taskTypes, setTaskTypes] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const { onChange, values } = useForm();\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    axios\r\n      .get(\"https://studiorganiser.firebaseio.com/test.json\")\r\n      .then(response => {\r\n        const ids = Object.keys(response.data);\r\n        const newManagers = [];\r\n        ids.forEach(id => {\r\n          newManagers.push({\r\n            name: response.data[id].name,\r\n            id,\r\n            active: response.data[id].active\r\n          });\r\n        });\r\n        setManagers(newManagers.filter(manager => manager.active));\r\n      });\r\n\r\n    axios\r\n      .get(\"https://studiorganiser.firebaseio.com/tasks.json\")\r\n      .then(response => {\r\n        const ids = Object.keys(response.data);\r\n        const newTaskTypes = [];\r\n        ids.forEach(id => {\r\n          newTaskTypes.push({\r\n            display: (\r\n              <span style={{ color: response.data[id].taskColor }}>\r\n                {response.data[id].taskType}\r\n              </span>\r\n            ),\r\n            value: id\r\n          });\r\n        });\r\n        setTaskTypes(newTaskTypes);\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  const submitHandler = async event => {\r\n    event.preventDefault();\r\n    console.log(values);\r\n    await axios.post(\r\n      \"https://studiorganiser.firebaseio.com/kanban.json\",\r\n      values\r\n    );\r\n  };\r\n\r\n  return (\r\n    <section className=\"TasksForm\">\r\n      <Card>\r\n        <form onSubmit={submitHandler}>\r\n          <TextInput\r\n            label=\"Task Name\"\r\n            name=\"taskName\"\r\n            value={values.taskName}\r\n            onChange={onChange}\r\n          />\r\n          {loading ? (\r\n            <FontAwesomeIcon icon=\"circle-notch\" spin size=\"lg\" />\r\n          ) : (\r\n            <div>\r\n              <label htmlFor=\"manager\">Manager &amp; Task Type</label>\r\n              <div className=\"managersAndTasks\">\r\n                <InputMapCheckbox\r\n                  name=\"managers\"\r\n                  options={managers}\r\n                  onChange={onChange}\r\n                  value={values.managers}\r\n                />\r\n                <div className=\"inputMapRadio\">\r\n                  <InputMapRadio\r\n                    name=\"taskType\"\r\n                    options={taskTypes}\r\n                    onChange={onChange}\r\n                    value={values.taskType}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <Button type=\"submit\">Add Task to the Board</Button>\r\n            </div>\r\n          )}\r\n        </form>\r\n      </Card>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default TasksForm;\r\n","import React from \"react\";\r\n\r\nconst ColorInput = ({ label, name, value = \"\", onChange }) => {\r\n  return (\r\n    <div>\r\n      <label htmlFor={name}>{label}</label>\r\n      <input\r\n        type=\"color\"\r\n        id={name}\r\n        onChange={event => onChange(name, event.target.value)}\r\n        value={value}\r\n      ></input>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ColorInput;\r\n","import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nimport Button from \"../../UI/Button\";\r\nimport Card from \"../../UI/Card\";\r\nimport ColorInput from \"../../components/Inputs/ColorInput\";\r\nimport TextInput from \"../../components/Inputs/TextInput\";\r\n\r\nimport useForm from \"../../hooks/useForm\";\r\n\r\nconst AddTask = ({ onSuccess, defaultValues }) => {\r\n  const [submitting, setSubmitting] = useState(false);\r\n  const { onChange, values } = useForm(defaultValues);\r\n\r\n  const handleSubmit = async event => {\r\n    event.preventDefault();\r\n    try {\r\n      setSubmitting(true);\r\n      if (values.id) {\r\n        await axios.put(\r\n          `https://studiorganiser.firebaseio.com/tasks/${values.id}.json`,\r\n          values\r\n        );\r\n      } else {\r\n        await axios.post(\r\n          \"https://studiorganiser.firebaseio.com/tasks.json\",\r\n          values\r\n        );\r\n      }\r\n      onSuccess();\r\n    } catch (e) {\r\n      console.log(e);\r\n      setSubmitting(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {submitting ? (\r\n        <FontAwesomeIcon icon=\"circle-notch\" spin size=\"lg\" />\r\n      ) : (\r\n        <Card>\r\n          <form onSubmit={handleSubmit} className=\"AddTask\">\r\n            <TextInput\r\n              label=\"Task Type\"\r\n              name=\"taskType\"\r\n              onChange={onChange}\r\n              value={values.taskType}\r\n            />\r\n            <ColorInput\r\n              label=\"Task Color\"\r\n              name=\"taskColor\"\r\n              onChange={onChange}\r\n              value={values.taskColor}\r\n            />\r\n            <Button type=\"submit\">Submit Task Type</Button>\r\n          </form>\r\n        </Card>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddTask;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nimport Button from \"../../UI/Button\";\r\nimport Card from \"../../UI/Card\";\r\n\r\nimport Table from \"../Table\";\r\n\r\nimport \"./TasksTypesList.css\";\r\n\r\nconst TaskTypesList = ({ setActiveTask }) => {\r\n  const [tasks, setTasks] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    axios\r\n      .get(\"https://studiorganiser.firebaseio.com/tasks.json\")\r\n      .then(response => {\r\n        const ids = Object.keys(response.data);\r\n        const newTasks = [];\r\n        ids.forEach(id => {\r\n          newTasks.push({\r\n            ...response.data[id],\r\n            id\r\n          });\r\n        });\r\n        setTasks(newTasks);\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  const deleteTaskHandler = async task => {\r\n    setLoading(true);\r\n    await axios.delete(\r\n      `https://studiorganiser.firebaseio.com/tasks/${task.id}.json`\r\n    );\r\n    const newTasks = tasks.filter(t => t.id !== task.id);\r\n    setTasks(newTasks);\r\n    setLoading(false);\r\n  };\r\n\r\n  return (\r\n    <section className=\"TasksTypesList\">\r\n      <Card>\r\n        <h3>Loaded Taks</h3>\r\n        {loading ? (\r\n          <FontAwesomeIcon icon=\"circle-notch\" spin size=\"lg\" />\r\n        ) : (\r\n          <Table\r\n            headings={[\r\n              { text: \"Task Name\", key: \"taskType\" },\r\n              { text: \"Task Color\", key: \"taskColor\" },\r\n              { text: \"\", key: \"edit\" },\r\n              { text: \"\", key: \"delete\" }\r\n            ]}\r\n            data={tasks.map(task => ({\r\n              ...task,\r\n              taskColor: (\r\n                <div\r\n                  style={{ backgroundColor: task.taskColor, height: \"20px\" }}\r\n                ></div>\r\n              ),\r\n              edit: (\r\n                <FontAwesomeIcon\r\n                  onClick={() => setActiveTask(task)}\r\n                  icon=\"pen\"\r\n                />\r\n              ),\r\n              delete: (\r\n                <FontAwesomeIcon\r\n                  onClick={() => deleteTaskHandler(task)}\r\n                  icon=\"trash-alt\"\r\n                  color=\"#8A8D8F\"\r\n                  size=\"lg\"\r\n                />\r\n              )\r\n            }))}\r\n          />\r\n        )}\r\n        {!loading ? (\r\n          <Button type=\"button\" onClick={() => setActiveTask(true)}>\r\n            Add Task Type\r\n          </Button>\r\n        ) : null}\r\n      </Card>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default TaskTypesList;\r\n","import React, { useState } from \"react\";\r\n\r\nimport AddTask from \"../Tasks/AddTask\";\r\nimport TaskTypesList from \"../Tasks/TasksTypesList\";\r\n\r\nimport \"./TaskTypes.css\";\r\n\r\nconst TaskTypes = () => {\r\n  const [activeTask, setActiveTask] = useState(null);\r\n  return (\r\n    <section className=\"TaskTypes\">\r\n      {activeTask ? (\r\n        <AddTask\r\n          defaultValues={activeTask}\r\n          onSuccess={() => setActiveTask(null)}\r\n        />\r\n      ) : (\r\n        <TaskTypesList setActiveTask={setActiveTask} />\r\n      )}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default TaskTypes;\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nimport Kanbanboard from \"./components/Kanbanboard\";\nimport Managers from \"./components/Managers/Managers\";\nimport TasksForm from \"../src/components/Tasks/TasksForm\";\nimport TaskTypes from \"./components/TaskTypes/TaskTypes\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <nav>\n          <ul>\n            <li className=\"box\">\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li className=\"box\">\n              <Link to=\"/addTask\">Add Task</Link>\n            </li>\n            <li className=\"box\">\n              <Link to=\"/taskTypes\">Task Types</Link>\n            </li>\n            <li className=\"box\">\n              <Link to=\"/managers\">Managers</Link>\n            </li>\n          </ul>\n        </nav>\n      </div>\n\n      <Switch>\n        <Route path=\"/taskTypes\" component={TaskTypes} />\n        <Route path=\"/managers\" component={Managers} />\n        <Route path=\"/addTask\" component={TasksForm} />\n        <Route path=\"/\" component={Kanbanboard} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport Dropzone from \"./dropzone/Dropzone\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { fab } from \"@fortawesome/free-brands-svg-icons\";\nimport {\n  faCircleNotch,\n  faTrashAlt,\n  faPen,\n  faGrinAlt,\n  faFrown\n} from \"@fortawesome/free-solid-svg-icons\";\n\nlibrary.add(fab, faCircleNotch, faTrashAlt, faPen, faGrinAlt, faFrown);\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}