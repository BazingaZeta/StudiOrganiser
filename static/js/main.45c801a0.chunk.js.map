{"version":3,"sources":["dropzone/Dropzone.js","components/Task.js","dropzone/Dropzone2.js","components/Kanbanboard.js","UI/Card.js","UI/Button.js","components/Table.js","components/Managers/ManagersTable.js","components/Inputs/NumberInput.js","components/Inputs/CheckboxInput.js","components/Inputs/TextInput.js","hooks/useForm.js","components/Managers/AddManager.js","components/Managers/Managers.js","axios.js","components/Inputs/InputMapCheckbox.js","components/Inputs/InputMapRadio.js","components/Tasks/TasksForm.js","components/Inputs/ColorInput.js","components/Tasks/AddTask.js","components/Tasks/TasksTypesList.js","components/TaskTypes/TaskTypes.js","App.js","serviceWorker.js","index.js"],"names":["Dropzone","newColumns","useState","columns","setColumns","useEffect","className","style","display","height","onDragEnd","result","destination","source","droppableId","sourceColumn","destColumn","sourceItems","items","destItems","splice","index","removed","column","copiedItems","Object","entries","map","id","flexDirection","alignItems","name","margin","key","provided","snapshot","droppableProps","ref","innerRef","background","isDraggingOver","padding","width","minHeight","item","draggableId","draggableProps","dragHandleProps","userSelect","backgroundColor","isDragging","color","content","placeholder","Task","uuid","children","taskType","managers","taskColor","setTaskColor","axios","get","then","response","data","borderColor","m","Kanbanboard","activeTasks","setActiveTasks","ids","keys","newTasks","forEach","push","task","taskName","Requested","t","ToDo","InProgress","Done","Card","props","Button","type","onClick","Table","headings","heading","text","ManageManagers","setActiveManager","setManagers","loading","setLoading","newManagers","deleteManagerHandler","manager","a","delete","filter","icon","spin","size","active","edit","NumberInput","label","value","onChange","min","max","htmlFor","event","target","CheckboxInput","checked","TextInput","useForm","defaultValues","values","setValues","console","log","prevState","AddManager","onSuccess","submitting","setSubmitting","handleSubmit","e","preventDefault","put","post","onSubmit","age","Managers","activeManager","instance","create","baseURL","InputMapCheckbox","options","handleChange","val","includes","filtered","InputMapRadio","TasksForm","taskTypes","setTaskTypes","newTaskTypes","submitHandler","ColorInput","AddTask","TaskTypesList","setActiveTask","tasks","setTasks","deleteTaskHandler","TaskTypes","activeTask","App","to","path","component","Boolean","window","location","hostname","match","library","add","fab","faCircleNotch","faTrashAlt","faPen","faGrinAlt","faFrown","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.45c801a0.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport uuid from \"uuid/v4\";\r\n\r\nconst Dropzone = ({ newColumns }) => {\r\n  const [columns, setColumns] = useState({});\r\n\r\n  useEffect(() => {\r\n    setColumns(newColumns);\r\n  }, [newColumns]);\r\n\r\n  const onDragEnd = (result, columns, setColumns) => {\r\n    if (!result.destination) return;\r\n    const { source, destination } = result;\r\n    if (source.droppableId !== destination.droppableId) {\r\n      const sourceColumn = columns[source.droppableId];\r\n      const destColumn = columns[destination.droppableId];\r\n      const sourceItems = [...sourceColumn.items];\r\n      const destItems = [...destColumn.items];\r\n      const [removed] = sourceItems.splice(source.index, 1);\r\n      destItems.splice(destination.index, 0, removed);\r\n      setColumns({\r\n        ...columns,\r\n        [source.droppableId]: {\r\n          ...sourceColumn,\r\n          items: sourceItems\r\n        },\r\n        [destination.droppableId]: {\r\n          ...destColumn,\r\n          items: destItems\r\n        }\r\n      });\r\n    } else {\r\n      const column = columns[source.droppableId];\r\n      const copiedItems = [...column.items];\r\n\r\n      const [removed] = copiedItems.splice(source.index, 1);\r\n      copiedItems.splice(destination.index, 0, removed);\r\n      setColumns({\r\n        ...columns,\r\n        [source.droppableId]: {\r\n          ...column,\r\n          items: copiedItems\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"dragNdrop\" style={{ display: \"flex\", height: \"100%\" }}>\r\n      <DragDropContext\r\n        onDragEnd={result => onDragEnd(result, columns, setColumns)}\r\n      >\r\n        {Object.entries(columns).map(([id, column]) => {\r\n          return (\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                alignItems: \"center\"\r\n              }}\r\n            >\r\n              <h2>{column.name}</h2>\r\n              <div style={{ margin: 8 }}>\r\n                <Droppable droppableId={id} key={id}>\r\n                  {(provided, snapshot) => {\r\n                    return (\r\n                      <div\r\n                        {...provided.droppableProps}\r\n                        ref={provided.innerRef}\r\n                        style={{\r\n                          background: snapshot.isDraggingOver\r\n                            ? \"lightblue\"\r\n                            : \"lightgrey\",\r\n                          padding: 4,\r\n                          width: 250,\r\n                          minHeight: 500\r\n                        }}\r\n                      >\r\n                        {column.items.map((item, index) => {\r\n                          return (\r\n                            <Draggable\r\n                              key={item.id}\r\n                              draggableId={item.id}\r\n                              index={index}\r\n                            >\r\n                              {(provided, snapshot) => {\r\n                                return (\r\n                                  <div\r\n                                    ref={provided.innerRef}\r\n                                    {...provided.draggableProps}\r\n                                    {...provided.dragHandleProps}\r\n                                    style={{\r\n                                      userSelect: \"none\",\r\n                                      padding: 16,\r\n                                      margin: \"0 0 8px 0\",\r\n                                      minHeight: \"50px\",\r\n                                      backgroundColor: snapshot.isDragging\r\n                                        ? \"#263B4A\"\r\n                                        : \"#456c86\",\r\n                                      color: \"white\",\r\n                                      ...provided.draggableProps.style\r\n                                    }}\r\n                                  >\r\n                                    {item.content}\r\n                                  </div>\r\n                                );\r\n                              }}\r\n                            </Draggable>\r\n                          );\r\n                        })}\r\n                        {provided.placeholder}\r\n                      </div>\r\n                    );\r\n                  }}\r\n                </Droppable>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </DragDropContext>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dropzone;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport \"./Task.css\";\r\n\r\nconst Task = ({ children, taskType, managers }) => {\r\n  const [taskColor, setTaskColor] = useState();\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(`https://studiorganiser.firebaseio.com/tasks/${taskType}.json`)\r\n      .then(response => {\r\n        const taskColor = response.data.taskColor;\r\n        setTaskColor(taskColor);\r\n      });\r\n  });\r\n\r\n  return (\r\n    <div\r\n      className=\"Task\"\r\n      style={{ backgroundColor: taskColor, borderColor: \"1px solid black\" }}\r\n    >\r\n      <h4>{children}</h4>\r\n      <h5>Managers:</h5>\r\n      {managers.map(m => (\r\n        <p key={m.id}>{m.name}</p>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Task;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport uuid from \"uuid\";\r\nvar columnsFromBackend = {\r\n  [uuid()]: {\r\n    name: \"Todo\",\r\n    items: []\r\n  }\r\n};\r\nconst Dropzone2 = ({ tasks }) => {\r\n  // const [columns, setColumns] = useState(columnsFromBackend);\r\n  // const [tasksToBoard, setTasksToBoard] = useState(tasks);\r\n\r\n  useEffect(() => {\r\n    columnsFromBackend = {\r\n      [uuid()]: {\r\n        name: \"Todo\",\r\n        items: tasks\r\n      }\r\n    };\r\n  }, [tasks]);\r\n\r\n  console.log(tasks);\r\n\r\n  return (\r\n    <div style={{ display: \"flex\", justifyContent: \"center\", height: \"100%\" }}>\r\n      <DragDropContext\r\n        onDragEnd={result => console.log(result)}\r\n      ></DragDropContext>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dropzone2;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport uuid from \"uuid/v4\";\r\n\r\nimport Dropzone from \"../dropzone/Dropzone\";\r\nimport Dropzone2 from \"../dropzone/Dropzone2\";\r\nimport Task from \"./Task\";\r\n\r\nimport \"./Kanbanboard.css\";\r\n\r\nconst Kanbanboard = () => {\r\n  const [activeTasks, setActiveTasks] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"https://studiorganiser.firebaseio.com/kanban.json\")\r\n      .then(response => {\r\n        const ids = Object.keys(response.data);\r\n        const newTasks = [];\r\n        ids.forEach(id => {\r\n          newTasks.push({\r\n            ...response.data[id],\r\n            id\r\n          });\r\n          //console.log(\"New Tasks\", newTasks);\r\n        });\r\n        setActiveTasks(newTasks);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"Kanbanboard-box\">\r\n      {activeTasks.map(task => (\r\n        <Task key={task.id} taskType={task.taskType} managers={task.managers}>\r\n          {task.taskName}\r\n        </Task>\r\n      ))}\r\n      <Dropzone\r\n        newColumns={{\r\n          Requested: {\r\n            name: \"Requested\",\r\n            items: activeTasks.map(t => ({ id: uuid(), content: t.taskName }))\r\n          },\r\n          ToDo: {\r\n            name: \"To do\",\r\n            items: []\r\n          },\r\n          InProgress: {\r\n            name: \"In Progress\",\r\n            items: []\r\n          },\r\n          Done: {\r\n            name: \"Done\",\r\n            items: []\r\n          }\r\n        }}\r\n        //tasks={activeTasks.map(t => ({ id: uuid(), content: t.taskName }))}\r\n      />\r\n      {/* <Dropzone2\r\n        tasks={[activeTasks.map(t => ({ id: t.id, content: t.taskName }))]}\r\n      /> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Kanbanboard;\r\n","import React from \"react\";\r\n\r\nimport \"./Card.css\";\r\n\r\nconst Card = props => {\r\n  return <div className=\"card\">{props.children}</div>;\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\n\r\nimport \"./Button.css\";\r\n\r\nconst Button = ({ type = \"button\", onClick, children }) => {\r\n  return (\r\n    <div className=\"Button\">\r\n      <button type={type} onClick={onClick}>\r\n        {children}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport \"./Table.css\";\r\n\r\nconst Table = ({ headings, data }) => {\r\n  return (\r\n    <table className=\"Table\">\r\n      <thead>\r\n        <tr>\r\n          {headings.map(heading => (\r\n            <th key={heading.key}>{heading.text}</th>\r\n          ))}\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {data.map(item => (\r\n          <tr key={item.id}>\r\n            {headings.map(heading => (\r\n              <td key={heading.key}>{item[heading.key]}</td>\r\n            ))}\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nimport Button from \"../../UI/Button\";\r\nimport Table from \"../Table\";\r\nimport \"./ManagersTable.css\";\r\n\r\nconst ManageManagers = ({ setActiveManager }) => {\r\n  const [managers, setManagers] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    axios\r\n      .get(\"https://studiorganiser.firebaseio.com/test.json\")\r\n      .then(response => {\r\n        const ids = Object.keys(response.data);\r\n        const newManagers = [];\r\n        ids.forEach(id => {\r\n          newManagers.push({\r\n            ...response.data[id],\r\n            id\r\n          });\r\n        });\r\n        setManagers(newManagers);\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  const deleteManagerHandler = async manager => {\r\n    setLoading(true);\r\n    await axios.delete(\r\n      `https://studiorganiser.firebaseio.com/test/${manager.id}.json`\r\n    );\r\n    const newManagers = managers.filter(m => m.id !== manager.id);\r\n    setManagers(newManagers);\r\n    setLoading(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"ManagersTable\">\r\n      <h3>Managers</h3>\r\n      {loading ? (\r\n        <FontAwesomeIcon icon=\"circle-notch\" spin size=\"lg\" />\r\n      ) : (\r\n        <Table\r\n          headings={[\r\n            { text: \"Name\", key: \"name\" },\r\n            { text: \"Age\", key: \"age\" },\r\n            { text: \"Active\", key: \"active\" },\r\n            { text: \"\", key: \"edit\" },\r\n            { text: \"\", key: \"delete\" }\r\n          ]}\r\n          data={managers.map(manager => ({\r\n            ...manager,\r\n            active: manager.active ? (\r\n              <FontAwesomeIcon icon=\"grin-alt\" color=\" #00ad43\" size=\"lg\" />\r\n            ) : (\r\n              <FontAwesomeIcon icon=\"frown\" color=\" #EF3340\" size=\"lg\" />\r\n            ),\r\n            edit: (\r\n              <FontAwesomeIcon\r\n                onClick={() => setActiveManager(manager)}\r\n                icon=\"pen\"\r\n                size=\"lg\"\r\n              />\r\n            ),\r\n            delete: (\r\n              <FontAwesomeIcon\r\n                onClick={() => deleteManagerHandler(manager)}\r\n                icon=\"trash-alt\"\r\n                color=\"#8A8D8F\"\r\n                size=\"lg\"\r\n              />\r\n            )\r\n          }))}\r\n        />\r\n      )}\r\n      {!loading ? (\r\n        // <button\r\n        //   type=\"button\"\r\n        //   className=\"submitButton\"\r\n        //   onClick={() => setActiveManager({})}\r\n        // >\r\n        //   Add Manager\r\n        // </button>\r\n        <Button type=\"button\" onClick={() => setActiveManager({})}>\r\n          Add Manager\r\n        </Button>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ManageManagers;\r\n","import React from \"react\";\r\n\r\nconst NumberInput = ({ label, name, value = \"\", onChange, min, max }) => {\r\n  return (\r\n    <div>\r\n      <label htmlFor={name}>{label}</label>\r\n      <input\r\n        type=\"number\"\r\n        id={name}\r\n        min={min}\r\n        max={max}\r\n        onChange={event => onChange(name, event.target.value)}\r\n        value={value}\r\n      ></input>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NumberInput;\r\n","import React from \"react\";\r\n\r\nconst CheckboxInput = ({ name, label, value = false, onChange }) => {\r\n  return (\r\n    <div>\r\n      <label htmlFor={name}>{label}</label>\r\n      <input\r\n        type=\"checkbox\"\r\n        id={name}\r\n        onChange={event => onChange(name, !value)}\r\n        checked={value}\r\n      ></input>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CheckboxInput;\r\n","import React from \"react\";\r\n\r\nimport \"./TextInput.css\";\r\n\r\nconst TextInput = ({ label, name, value = \"\", onChange }) => {\r\n  return (\r\n    <div className=\"TextInput\">\r\n      <label htmlFor={name}>{label}</label>\r\n      <input\r\n        type=\"text\"\r\n        id={name}\r\n        onChange={event => onChange(name, event.target.value)}\r\n        value={value}\r\n      ></input>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TextInput;\r\n","import { useState } from \"react\";\r\n\r\nconst useForm = (defaultValues = {}) => {\r\n  const [values, setValues] = useState(defaultValues);\r\n\r\n  const onChange = (name, value) => {\r\n    console.log(name, value);\r\n    setValues(prevState => {\r\n      return { ...prevState, [name]: value };\r\n    });\r\n  };\r\n\r\n  return { onChange, values };\r\n};\r\n\r\nexport default useForm;\r\n","import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nimport Button from \"../../UI/Button\";\r\nimport NumberInput from \"../Inputs/NumberInput\";\r\nimport CheckboxInput from \"../Inputs/CheckboxInput\";\r\nimport TextInput from \"../Inputs/TextInput\";\r\n\r\nimport useForm from \"../../hooks/useForm\";\r\n\r\nconst AddManager = ({ onSuccess, defaultValues }) => {\r\n  const [submitting, setSubmitting] = useState(false);\r\n  const { onChange, values } = useForm(defaultValues);\r\n\r\n  const handleSubmit = async e => {\r\n    e.preventDefault();\r\n    try {\r\n      setSubmitting(true);\r\n      if (values.id) {\r\n        await axios.put(\r\n          `https://studiorganiser.firebaseio.com/test/${values.id}.json`,\r\n          values\r\n        );\r\n      } else {\r\n        await axios.post(\r\n          \"https://studiorganiser.firebaseio.com/test.json\",\r\n          values\r\n        );\r\n      }\r\n      onSuccess();\r\n    } catch (e) {\r\n      console.log(e);\r\n      setSubmitting(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {submitting ? (\r\n        <FontAwesomeIcon icon=\"circle-notch\" spin size=\"lg\" />\r\n      ) : (\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"form-control\">\r\n            <TextInput\r\n              label=\"Manager Name\"\r\n              name=\"name\"\r\n              onChange={onChange}\r\n              value={values.name}\r\n            />\r\n            <NumberInput\r\n              label=\"Manager age\"\r\n              max={100}\r\n              min={0}\r\n              name=\"age\"\r\n              onChange={onChange}\r\n              value={values.age}\r\n            />\r\n            <CheckboxInput\r\n              label=\"Active\"\r\n              onChange={onChange}\r\n              value={values.active}\r\n              name=\"active\"\r\n            />\r\n            <Button type=\"submit\">Submit Manager</Button>\r\n          </div>\r\n        </form>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddManager;\r\n","import React, { useState } from \"react\";\r\nimport Card from \"../../UI/Card\";\r\n\r\nimport ManagersTable from \"./ManagersTable\";\r\nimport \"./Managers.css\";\r\nimport AddManager from \"./AddManager\";\r\n\r\nconst Managers = () => {\r\n  const [activeManager, setActiveManager] = useState(null);\r\n\r\n  return (\r\n    <section className=\"Managers\">\r\n      <Card>\r\n        {activeManager ? (\r\n          <AddManager\r\n            onSuccess={() => setActiveManager(null)}\r\n            defaultValues={activeManager}\r\n          />\r\n        ) : (\r\n          <ManagersTable setActiveManager={setActiveManager} />\r\n        )}\r\n      </Card>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Managers;\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://studiorganiser.firebaseio.com/\"\r\n});\r\n\r\nexport default instance;\r\n","import React from \"react\";\r\n\r\nimport \"./InputMapCheckbox.css\";\r\n\r\nconst InputMapCheckbox = ({ options, onChange, value = [], name }) => {\r\n  const handleChange = (name, val) => {\r\n    if (value.includes(val)) {\r\n      const filtered = value.filter(item => item !== val);\r\n      onChange(name, filtered);\r\n    } else {\r\n      onChange(name, [...value, val]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"InputMapCheckbox\">\r\n      {options.map(item => (\r\n        <div className=\"checkboxInput\" key={item.id}>\r\n          <input\r\n            type=\"checkbox\"\r\n            name={name}\r\n            onChange={event =>\r\n              handleChange(name, { name: item.name, id: item.id })\r\n            }\r\n          />\r\n          {item.name}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputMapCheckbox;\r\n","import React from \"react\";\r\n\r\nimport \"./InputMapRadio.css\";\r\n\r\nconst InputMapRadio = ({ onChange, options, name, value }) => {\r\n  return (\r\n    <div className=\"InputMapRadio\">\r\n      {options.map(item => (\r\n        <div className=\"radioInput\" key={item.value}>\r\n          <input\r\n            type=\"radio\"\r\n            name={name}\r\n            checked={value === item.value}\r\n            onChange={() => onChange(name, item.value)}\r\n          />\r\n          {item.display}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputMapRadio;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"../../axios\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nimport Button from \"../../UI/Button\";\r\nimport Card from \"../../UI/Card\";\r\nimport InputMapCheckbox from \"../Inputs/InputMapCheckbox\";\r\nimport InputMapRadio from \"../Inputs/InputMapRadio\";\r\nimport TextInput from \"../Inputs/TextInput\";\r\n\r\nimport useForm from \"../../hooks/useForm\";\r\nimport \"./TasksForm.css\";\r\n\r\nconst TasksForm = () => {\r\n  const [managers, setManagers] = useState([]);\r\n  const [taskTypes, setTaskTypes] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const { onChange, values } = useForm();\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    axios\r\n      .get(\"https://studiorganiser.firebaseio.com/test.json\")\r\n      .then(response => {\r\n        const ids = Object.keys(response.data);\r\n        const newManagers = [];\r\n        ids.forEach(id => {\r\n          newManagers.push({\r\n            name: response.data[id].name,\r\n            id,\r\n            active: response.data[id].active\r\n          });\r\n        });\r\n        setManagers(newManagers.filter(manager => manager.active));\r\n      });\r\n\r\n    axios\r\n      .get(\"https://studiorganiser.firebaseio.com/tasks.json\")\r\n      .then(response => {\r\n        const ids = Object.keys(response.data);\r\n        const newTaskTypes = [];\r\n        ids.forEach(id => {\r\n          newTaskTypes.push({\r\n            display: (\r\n              <span style={{ color: response.data[id].taskColor }}>\r\n                {response.data[id].taskType}\r\n              </span>\r\n            ),\r\n            value: id\r\n          });\r\n        });\r\n        setTaskTypes(newTaskTypes);\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  const submitHandler = async event => {\r\n    event.preventDefault();\r\n    console.log(values);\r\n    await axios.post(\r\n      \"https://studiorganiser.firebaseio.com/kanban.json\",\r\n      values\r\n    );\r\n  };\r\n\r\n  return (\r\n    <section className=\"TasksForm\">\r\n      <Card>\r\n        <form onSubmit={submitHandler}>\r\n          <TextInput\r\n            label=\"Task Name\"\r\n            name=\"taskName\"\r\n            value={values.taskName}\r\n            onChange={onChange}\r\n          />\r\n          {loading ? (\r\n            <FontAwesomeIcon icon=\"circle-notch\" spin size=\"lg\" />\r\n          ) : (\r\n            <div>\r\n              <label htmlFor=\"manager\">Manager &amp; Task Type</label>\r\n              <div className=\"managersAndTasks\">\r\n                <InputMapCheckbox\r\n                  name=\"managers\"\r\n                  options={managers}\r\n                  onChange={onChange}\r\n                  value={values.managers}\r\n                />\r\n                <div className=\"inputMapRadio\">\r\n                  <InputMapRadio\r\n                    name=\"taskType\"\r\n                    options={taskTypes}\r\n                    onChange={onChange}\r\n                    value={values.taskType}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <Button type=\"submit\">Add Task to the Board</Button>\r\n            </div>\r\n          )}\r\n        </form>\r\n      </Card>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default TasksForm;\r\n","import React from \"react\";\r\n\r\nconst ColorInput = ({ label, name, value = \"\", onChange }) => {\r\n  return (\r\n    <div>\r\n      <label htmlFor={name}>{label}</label>\r\n      <input\r\n        type=\"color\"\r\n        id={name}\r\n        onChange={event => onChange(name, event.target.value)}\r\n        value={value}\r\n      ></input>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ColorInput;\r\n","import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nimport Button from \"../../UI/Button\";\r\nimport Card from \"../../UI/Card\";\r\nimport ColorInput from \"../../components/Inputs/ColorInput\";\r\nimport TextInput from \"../../components/Inputs/TextInput\";\r\n\r\nimport useForm from \"../../hooks/useForm\";\r\n\r\nconst AddTask = ({ onSuccess, defaultValues }) => {\r\n  const [submitting, setSubmitting] = useState(false);\r\n  const { onChange, values } = useForm(defaultValues);\r\n\r\n  const handleSubmit = async event => {\r\n    event.preventDefault();\r\n    try {\r\n      setSubmitting(true);\r\n      if (values.id) {\r\n        await axios.put(\r\n          `https://studiorganiser.firebaseio.com/tasks/${values.id}.json`,\r\n          values\r\n        );\r\n      } else {\r\n        await axios.post(\r\n          \"https://studiorganiser.firebaseio.com/tasks.json\",\r\n          values\r\n        );\r\n      }\r\n      onSuccess();\r\n    } catch (e) {\r\n      console.log(e);\r\n      setSubmitting(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {submitting ? (\r\n        <FontAwesomeIcon icon=\"circle-notch\" spin size=\"lg\" />\r\n      ) : (\r\n        <Card>\r\n          <form onSubmit={handleSubmit} className=\"AddTask\">\r\n            <TextInput\r\n              label=\"Task Type\"\r\n              name=\"taskType\"\r\n              onChange={onChange}\r\n              value={values.taskType}\r\n            />\r\n            <ColorInput\r\n              label=\"Task Color\"\r\n              name=\"taskColor\"\r\n              onChange={onChange}\r\n              value={values.taskColor}\r\n            />\r\n            <Button type=\"submit\">Submit Task Type</Button>\r\n          </form>\r\n        </Card>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddTask;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nimport Button from \"../../UI/Button\";\r\nimport Card from \"../../UI/Card\";\r\n\r\nimport Table from \"../Table\";\r\n\r\nimport \"./TasksTypesList.css\";\r\n\r\nconst TaskTypesList = ({ setActiveTask }) => {\r\n  const [tasks, setTasks] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    axios\r\n      .get(\"https://studiorganiser.firebaseio.com/tasks.json\")\r\n      .then(response => {\r\n        const ids = Object.keys(response.data);\r\n        const newTasks = [];\r\n        ids.forEach(id => {\r\n          newTasks.push({\r\n            ...response.data[id],\r\n            id\r\n          });\r\n        });\r\n        setTasks(newTasks);\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  const deleteTaskHandler = async task => {\r\n    setLoading(true);\r\n    await axios.delete(\r\n      `https://studiorganiser.firebaseio.com/tasks/${task.id}.json`\r\n    );\r\n    const newTasks = tasks.filter(t => t.id !== task.id);\r\n    setTasks(newTasks);\r\n    setLoading(false);\r\n  };\r\n\r\n  return (\r\n    <section className=\"TasksTypesList\">\r\n      <Card>\r\n        <h3>Loaded Taks</h3>\r\n        {loading ? (\r\n          <FontAwesomeIcon icon=\"circle-notch\" spin size=\"lg\" />\r\n        ) : (\r\n          <Table\r\n            headings={[\r\n              { text: \"Task Name\", key: \"taskType\" },\r\n              { text: \"Task Color\", key: \"taskColor\" },\r\n              { text: \"\", key: \"edit\" },\r\n              { text: \"\", key: \"delete\" }\r\n            ]}\r\n            data={tasks.map(task => ({\r\n              ...task,\r\n              taskColor: (\r\n                <div\r\n                  style={{ backgroundColor: task.taskColor, height: \"20px\" }}\r\n                ></div>\r\n              ),\r\n              edit: (\r\n                <FontAwesomeIcon\r\n                  onClick={() => setActiveTask(task)}\r\n                  icon=\"pen\"\r\n                />\r\n              ),\r\n              delete: (\r\n                <FontAwesomeIcon\r\n                  onClick={() => deleteTaskHandler(task)}\r\n                  icon=\"trash-alt\"\r\n                  color=\"#8A8D8F\"\r\n                  size=\"lg\"\r\n                />\r\n              )\r\n            }))}\r\n          />\r\n        )}\r\n        {!loading ? (\r\n          <Button type=\"button\" onClick={() => setActiveTask(true)}>\r\n            Add Task Type\r\n          </Button>\r\n        ) : null}\r\n      </Card>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default TaskTypesList;\r\n","import React, { useState } from \"react\";\r\n\r\nimport AddTask from \"../Tasks/AddTask\";\r\nimport TaskTypesList from \"../Tasks/TasksTypesList\";\r\n\r\nimport \"./TaskTypes.css\";\r\n\r\nconst TaskTypes = () => {\r\n  const [activeTask, setActiveTask] = useState(null);\r\n  return (\r\n    <section className=\"TaskTypes\">\r\n      {activeTask ? (\r\n        <AddTask\r\n          defaultValues={activeTask}\r\n          onSuccess={() => setActiveTask(null)}\r\n        />\r\n      ) : (\r\n        <TaskTypesList setActiveTask={setActiveTask} />\r\n      )}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default TaskTypes;\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nimport Kanbanboard from \"./components/Kanbanboard\";\nimport Managers from \"./components/Managers/Managers\";\nimport TasksForm from \"../src/components/Tasks/TasksForm\";\nimport TaskTypes from \"./components/TaskTypes/TaskTypes\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <nav>\n          <ul>\n            <li className=\"box\">\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li className=\"box\">\n              <Link to=\"/addTask\">Add Task</Link>\n            </li>\n            <li className=\"box\">\n              <Link to=\"/taskTypes\">Task Types</Link>\n            </li>\n            <li className=\"box\">\n              <Link to=\"/managers\">Managers</Link>\n            </li>\n          </ul>\n        </nav>\n      </div>\n\n      <Switch>\n        <Route path=\"/taskTypes\" component={TaskTypes} />\n        <Route path=\"/managers\" component={Managers} />\n        <Route path=\"/addTask\" component={TasksForm} />\n        <Route path=\"/\" component={Kanbanboard} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { fab } from \"@fortawesome/free-brands-svg-icons\";\nimport {\n  faCircleNotch,\n  faTrashAlt,\n  faPen,\n  faGrinAlt,\n  faFrown\n} from \"@fortawesome/free-solid-svg-icons\";\n\nlibrary.add(fab, faCircleNotch, faTrashAlt, faPen, faGrinAlt, faFrown);\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}